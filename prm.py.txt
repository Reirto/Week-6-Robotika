#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
import yaml
import rospy

# Load parameters from YAML file
def load_params(file):
    with open(file, 'r') as f:
        return yaml.safe_load(f)

# Generate random nodes within a given space
def generate_random_nodes(num_nodes, x_max, y_max):
    nodes = np.random.rand(num_nodes, 2) * [x_max, y_max]
    return nodes

# Create edges based on distance threshold
def create_edges(nodes, threshold):
    edges = []
    for i, node1 in enumerate(nodes):
        for j, node2 in enumerate(nodes):
            if i != j and np.linalg.norm(node1 - node2) < threshold:
                edges.append((i, j))
    return edges

# Find the shortest path using Dijkstra's algorithm
def find_shortest_path(graph, start, goal):
    return nx.shortest_path(graph, source=start, target=goal, weight='weight')

# Visualize the PRM with Matplotlib
def visualize_prm(nodes, edges, path, start, goal):
    plt.figure()
    for (i, j) in edges:
        plt.plot([nodes[i][0], nodes[j][0]], [nodes[i][1], nodes[j][1]], 'r-', alpha=0.5)
    for p in path:
        plt.plot([nodes[p[0]][0], nodes[p[1]][0]], [nodes[p[0]][1], nodes[p[1]][1]], 'y-', linewidth=2)
    plt.scatter(nodes[:, 0], nodes[:, 1], color='blue')
    plt.scatter(nodes[start, 0], nodes[start, 1], color='green', s=100, label="Start")
    plt.scatter(nodes[goal, 0], nodes[goal, 1], color='red', s=100, label="Goal")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.legend()
    plt.title("Probabilistic Roadmap (PRM) with Shortest Path")
    plt.show()

def main():
    # Initialize ROS node (optional)
    rospy.init_node('prm_node')

    # Load parameters from YAML file
    params = load_params('/home/reirto/catkin_ws/src/prm_package/params.yaml')
    num_nodes = params['num_nodes']
    threshold = params['threshold']
    start = params['start']
    goal = params['goal']
    x_max = params['x_max']
    y_max = params['y_max']

    # Generate nodes and edges
    nodes = generate_random_nodes(num_nodes, x_max, y_max)
    edges = create_edges(nodes, threshold)
    
    # Create a graph
    graph = nx.Graph()
    graph.add_nodes_from(range(num_nodes))
    for i, j in edges:
        dist = np.linalg.norm(nodes[i] - nodes[j])
        graph.add_edge(i, j, weight=dist)

    # Find shortest path
    path = find_shortest_path(graph, start, goal)
    path_edges = [(path[n], path[n + 1]) for n in range(len(path) - 1)]

    # Visualize PRM and path
    visualize_prm(nodes, edges, path_edges, start, goal)

if __name__ == '__main__':
    main()
